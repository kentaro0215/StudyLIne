<script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>

<!-- 合計時間を表示するための要素を追加 -->
<div id="total-study-time" class="text-lg font-semibold"></div>

<select id="year-selector" class="select select-bordered max-w-xs"></select>

<select id="month-selector" class="select select-bordered max-w-xs">
  <option value="1">1月</option>
  <option value="2">2月</option>
  <option value="3">3月</option>
  <option value="4">4月</option>
  <option value="5">5月</option>
  <option value="6">6月</option>
  <option value="7">7月</option>
  <option value="8">8月</option>
  <option value="9">9月</option>
  <option value="10">10月</option>
  <option value="11">11月</option>
  <option value="12">12月</option>
</select>


<canvas id="myChart" width="400" height="150"></canvas>
    <canvas id="myChart"></canvas>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    
    <script type="text/javascript">
      document.addEventListener('DOMContentLoaded', (event) => {
        const monthSelector = document.getElementById('month-selector');
        const ctx = document.getElementById('myChart').getContext('2d');
        let myChart;

     // バックエンドから利用可能な年のリストを取得してドロップダウンに追加する関数
    async function populateYearOptions() {
      // ここでバックエンドから年のデータを取得する
      const response = await axios.get('/path/to/your/endpoint', {
        headers: {
          Accept: 'application/json'
        }
      });
      const years = response.data.years; // 仮のプロパティ名

      years.forEach(year => {
        const option = document.createElement('option');
        option.value = year;
        option.textContent = `${year}年`;
        yearSelector.appendChild(option);
      });
    }

        async function updateChart(month) {
          const now = new Date();
          const year = now.getFullYear();
    
          // バックエンドから選択した月のデータを取得
          const response = await axios.get(`/dashboard/index/${year}/${month}`, {
                  headers: {
                      Accept: 'application/json'
                  }
              });

          const data = response.data;

          const values = Object.values(response.data);

            const totalStudyMinutes = values.reduce((acc, cur) => acc + cur, 0);
  
  // 時間と分に分割
  const hours = Math.floor(totalStudyMinutes / 60);
  const minutes = totalStudyMinutes % 60;

  // ゼロ埋めしてフォーマット
  const formattedTotalTime = `${String(hours).padStart(2, '0')}:${String(minutes).padStart(2, '0')}`;
  
  document.getElementById('total-study-time').textContent = `合計勉強時間: ${formattedTotalTime}`;

    
          const daysInMonth = new Date(year, month, 0).getDate();
          const labels = Array.from({ length: daysInMonth }, (_, i) => i + 1); // 日付のみの配列を生成

          const defaultMaxValue = 360; // 6時間
          const maxValue = Math.ceil(Math.max(...values) / 60) * 60;
          const finalMaxValue = Math.max(defaultMaxValue, maxValue);


    
          if (myChart) {
            // 既存のグラフを削除
            myChart.destroy();
          }
    
          // 新しいグラフを作成
          myChart = new Chart(ctx, {
            type: 'bar',
            data: {
                labels: labels,
                datasets: [{
                    label: 'Total Time',
                    data: values,
                    borderColor: 'rgba(54, 162, 235, 1)',
                    borderWidth: 1
                }]
            },
            options: {
                scales: {
                    y: {
                        beginAtZero: true,
                        min: 0,
                        max: finalMaxValue,
                        ticks: {
                          stepSize:60,
                          callback: function(value, index, values){
                            return  value / 60 +  '時間' 
                          }
                        }
                    }
                }
            }
          });
        }

        populateYearOptions();

        yearSelector.addEventListener('change', function() {
          const selectedYear = yearSelector.value;
          const selectedMonth = monthSelector.value;
          updateChart(selectedYear, selectedMonth);
        });
    
        monthSelector.addEventListener('change', function() {
          const selectedMonth = monthSelector.value;
          updateChart(selectedMonth);
        });
    
        // 初期値として現在の月のグラフを表示
        monthSelector.value = new Date().getMonth() + 1;
        monthSelector.dispatchEvent(new Event('change'));
      });
    </script>
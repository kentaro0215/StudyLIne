<script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>


<select id="month-selector" class="select select-bordered max-w-xs">
  <option value="1">1月</option>
  <option value="2">2月</option>
  <option value="3">3月</option>
  <option value="4">4月</option>
  <option value="5">5月</option>
  <option value="6">6月</option>
  <option value="7">7月</option>
  <option value="8">8月</option>
  <option value="9">9月</option>
  <option value="10">10月</option>
  <option value="11">11月</option>
  <option value="12">12月</option>
</select>
<canvas id="myChart" width="400" height="150"></canvas>
    <canvas id="myChart"></canvas>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    
    
    <script type="text/javascript">
      document.addEventListener('DOMContentLoaded', (event) => {
        const monthSelector = document.getElementById('month-selector');
        const ctx = document.getElementById('myChart').getContext('2d');
        let myChart;
    
        async function updateChart(month) {
          const now = new Date();
          const year = now.getFullYear();
    
          // バックエンドから選択した月のデータを取得
          const response = await axios.get(`/dashboard/after_login/${year}/${month}`, {
                  headers: {
                      Accept: 'application/json'
                  }
              });

          const data = response.data;
          // console.log(data);

          const values = Object.values(response.data);
          console.log(values);
    
          const daysInMonth = new Date(year, month, 0).getDate();
          const labels = Array.from({ length: daysInMonth }, (_, i) => i + 1); // 日付のみの配列を生成

    
          if (myChart) {
            // 既存のグラフを削除
            myChart.destroy();
          }
    
          // 新しいグラフを作成
          myChart = new Chart(ctx, {
            type: 'bar',
            data: {
                labels: labels,
                datasets: [{
                    label: 'Total Time',
                    data: values,
                    borderColor: 'rgba(54, 162, 235, 1)',
                    borderWidth: 1
                }]
            },
            options: {
                scales: {
                    y: {
                        beginAtZero: true,
                        ticks: {
                          stepSize:60,
                          callback: function(value, index, values){
                            return  value / 60 +  '時間' 
                          }
                        }
                    }
                }
            }
          });
        }
    
        monthSelector.addEventListener('change', function() {
          const selectedMonth = monthSelector.value;
          updateChart(selectedMonth);
        });
    
        // 初期値として現在の月のグラフを表示
        monthSelector.value = new Date().getMonth() + 1;
        monthSelector.dispatchEvent(new Event('change'));
      });
    </script> 